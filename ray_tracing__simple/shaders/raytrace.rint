/*
 * Copyright (c) 2019-2021, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: Copyright (c) 2019-2021 NVIDIA CORPORATION
 * SPDX-License-Identifier: Apache-2.0
 */

#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require
#include "raycommon.glsl"
#include "wavefront.glsl"


layout(set = 1, binding = eImplicit, scalar) buffer allVoxels_
{
  Voxel allVoxels[];
};
layout(push_constant) uniform _PushConstantRay { PushConstantRay pcRay; };

//layout(set = 1, binding = eWorldProp, scalar) buffer allWorldProperties_
//{
  //float maxDistance;
//};


struct Ray
{
  vec3 origin;
  vec3 direction;
};

// Ray-Voxel intersection
// http://viclw17.github.io/2018/07/16/raytracing-ray-voxel-intersection/
//float hitVoxel(const Voxel s, const Ray r)
//{
//  vec3  oc           = r.origin - s.center;
//  float a            = dot(r.direction, r.direction);
//  float b            = 2.0 * dot(oc, r.direction);
//  float c            = dot(oc, oc) - s.side * s.side;
//  float discriminant = b * b - 4 * a * c;
//  if(discriminant < 0)
//  {
//    return -1.0;
//  }
//  else
//  {
//    return (-b - sqrt(discriminant)) / (2.0 * a);
//  }
//}

bool isTooFar(const Aabb aabb, const Ray r) 
{
  // distance > maxDistance?
  float distanceMin = sqrt(pow(aabb.minimum.x - r.origin.x, 2) + pow(aabb.minimum.y - r.origin.y, 2) + pow(aabb.minimum.z - r.origin.z, 2));
  float distanceMax = sqrt(pow(aabb.minimum.x - r.origin.x, 2) + pow(aabb.minimum.y - r.origin.y, 2) + pow(aabb.minimum.z - r.origin.z, 2));
  if(distanceMin > pcRay.maxDistance && distanceMax > pcRay.maxDistance)
    return true;
  else
    return false;
}

// Ray-AABB intersection
float hitAabb(const Aabb aabb, const Ray r)
{
  vec3  invDir = 1.0 / r.direction;
  vec3  tbot   = invDir * (aabb.minimum - r.origin);
  vec3  ttop   = invDir * (aabb.maximum - r.origin);
  vec3  tmin   = min(ttop, tbot);
  vec3  tmax   = max(ttop, tbot);

  float t0     = max(tmin.x, max(tmin.y, tmin.z));
  float t1     = min(tmax.x, min(tmax.y, tmax.z));
  return t1 > max(t0, 0.0) ? t0 : -1.0;
}

void main()
{
  Ray ray;
  ray.origin    = gl_WorldRayOriginEXT;
  ray.direction = gl_WorldRayDirectionEXT;

  // Voxel data
  Voxel voxel = allVoxels[gl_PrimitiveID];

    float tHit    = -1;
    int   hitKind = 1;
    //int   hitKind = gl_PrimitiveID % 2 == 0 ? KIND_SPHERE : KIND_CUBE;
    //if(hitKind == KIND_SPHERE)
    //{
    //  // Voxel intersection
    //  tHit = hitVoxel(voxel, ray);
    //}
    //else
    {
        // AABB intersection
        Aabb aabb;
        aabb.minimum = voxel.center - vec3(voxel.side);
        aabb.maximum = voxel.center + vec3(voxel.side);
        if(!isTooFar(aabb, ray)) {
            tHit         = hitAabb(aabb, ray);
        } else {
            tHit         = -1.0;
        }
    }

    // Report hit point
    if(tHit > 0)
        reportIntersectionEXT(tHit, hitKind);
}
